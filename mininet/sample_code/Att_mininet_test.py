#!/usr/bin/python

"""
Custom topology for Mininet, generated by GraphML-Topo-to-Mininet-Network-Generator.
"""
import argparse
from time import sleep, time
from multiprocessing import Process
from subprocess import Popen
import random
import os

from mininet.topo import Topo
from mininet.net import Mininet
from mininet.node import RemoteController
from mininet.node import Node
from mininet.node import CPULimitedHost
from mininet.link import TCLink
from mininet.cli import CLI
from mininet.log import setLogLevel
from mininet.util import dumpNodeConnections

from utils.monitor import *

parser = argparse.ArgumentParser(description="Hedera tests")

parser.add_argument('--dir', '-d',
                    help="Directory to store outputs",
                    default="results")

parser.add_argument('--time', '-t',
                    dest="time",
                    type=int,
                    help="Duration of the experiment.",
                    default=60)

parser.add_argument('--iperf',
                    dest="iperf",
                    help="Path to custom iperf",
                    required=True)

parser.add_argument('--traffic',
                    dest="traffic",
                    help="Traffic matrix to simulate",
                    default="random")

parser.add_argument('--flowsPerHost', '-fph',
                    dest="fph",
                    type=int,
                    help="Only use this parameter with random traffic pattern",
                    default=1)

# Export parameters
args = parser.parse_args()
IPERF_PATH = args.iperf


class GeneratedTopo(Topo):
    "Internet Topology Zoo Specimen."

    def __init__(self, hps, sw_ip_fname, **opts):
        "Create a topology."

        # Initialize Topology
        Topo.__init__(self, **opts)

        self.nHosts = 1
        self.sw_ip = {}

        self.get_ip_based(fname=sw_ip_fname)

        # add nodes, switches first...
        NY54 = self.addSwitch('NY54')
        CMBR = self.addSwitch('CMBR')
        CHCG = self.addSwitch('CHCG')
        PHLA = self.addSwitch('PHLA')
        WASH = self.addSwitch('WASH')

        # ... and now hosts
        self.add_hosts(sw=NY54, nHosts=hps, sw_idx=0)
        self.add_hosts(sw=CMBR, nHosts=hps, sw_idx=1)
        self.add_hosts(sw=CHCG, nHosts=hps, sw_idx=2)
        self.add_hosts(sw=PHLA, nHosts=hps, sw_idx=3)
        self.add_hosts(sw=WASH, nHosts=hps, sw_idx=4)

        # add edges between switch and corresponding host

        # add edges between switches
        self.addLink(NY54, CMBR, bw=1000, delay='0.979030824185ms')
        self.addLink(NY54, CHCG, bw=1000, delay='0.806374975652ms')
        self.addLink(NY54, PHLA, bw=1000, delay='0.686192970166ms')
        self.addLink(PHLA, WASH, bw=1000, delay='0.605826192092ms')
        self.addLink(CMBR, PHLA, bw=1000, delay='1.4018238197ms')
        self.addLink(CHCG, PHLA, bw=1000, delay='1.07297714274ms')

    def add_hosts(self, sw, nHosts, sw_idx):

        for h in range(1, nHosts + 1):
            host_idx = h + nHosts
            host_name = 'h%ds%d' % (host_idx, sw_idx)
            ip_based = self.sw_ip[sw]
            de_ip_based = ip_based.split('.')

            host_ip = de_ip_based[0] + '.' + de_ip_based[1] + '.' + de_ip_based[2] + '.' + str(host_idx) + '/24'
            defaultRoute = 'via ' + de_ip_based[0] + '.' + de_ip_based[1] + '.' + de_ip_based[2] + '.' + str(h)

            h = self.addHost(host_name, ip=host_ip, defaultRoute=defaultRoute)
            self.addLink(sw, h)

            self.nHosts += 1

    def get_ip_based(self, fname):
        with open(fname, 'r') as f:
            for line in f:
                sw_name, ip_based = line.split(' ')
                self.sw_ip[sw_name] = ip_based


# HERE THE CODE DEFINITION OF THE TOPOLOGY ENDS

# the following code produces an executable script working with a remote controller
# and providing ssh access to the the mininet hosts from within the ubuntu vm
controller_ip = ''


def setupNetwork(controller_ip, hps, sw_ip_fname):
    "Create network and run simple performance test"
    # check if remote controller's ip was set
    # else set it to localhost
    topo = GeneratedTopo(hps=hps, sw_ip_fname=sw_ip_fname)
    if controller_ip == '':
        # controller_ip = '10.0.2.2';
        controller_ip = '127.0.0.1'
    net = Mininet(topo=topo, controller=lambda a: RemoteController(a, ip=controller_ip, port=6633), host=CPULimitedHost,
                  link=TCLink)
    return net


def get_host_name(index):
    return 'h%d' % index


def compute_random(nHosts):
    matrix = []
    for ind in range(nHosts):
        dst = random.randint(0, nHosts - 1)
        while dst == ind:
            dst = random.randint(0, nHosts - 1)
        matrix.append(dst)
    return matrix


def compute_randbij(nHosts):
    matrix = range(0, nHosts)
    random.shuffle(matrix)
    return matrix


def addMatrixToFlow(flowToCreate, matrix):
    for i in range(len(matrix)):
        flowToCreate.append((i, matrix[i]))


def wait_listening(client, server, tcp_port):
    "Wait until server is listening on port"
    if not 'telnet' in client.cmd('which telnet'):
        raise Exception('Could not find telnet')
    cmd = ('sh -c "echo A | telnet -e A %s %s"' % (server.IP(), tcp_port))
    while 'Connected' not in client.cmd(cmd):
        print '|--- Wait for the tcp port listening on', server
        sleep(.5)


def start_tcpprobe():
    os.system("rmmod tcp_probe 1>/dev/null 2>&1; modprobe tcp_probe")
    Popen("cat /proc/net/tcpprobe >/dev/null", shell=True)


def stop_tcpprobe():
    os.system("killall -9 cat; rmmod tcp_probe 1>/dev/null 2>&1")


def run_expt(net, flowsToCreate):
    "Run experiment"

    seconds = args.time

    tcp_port = 5001

    udp_port = 5002

    # Start receivers
    dstSet = set([p[1] for p in flowsToCreate])
    for dest_index in dstSet:
        dest_host_name = get_host_name(dest_index)
        dest = net.getNodeByName(dest_host_name)
        dest.cmd('%s -s -p %s > /dev/null &' % (IPERF_PATH, tcp_port))
        dest.cmd('%s -s -u -p %s > /dev/null &' % (IPERF_PATH, udp_port))

    for src_index, dest_index in flowsToCreate:
        src = net.getNodeByName(get_host_name(src_index))
        dest = net.getNodeByName(get_host_name(dest_index))
        ping_cmd = 'ping -c 1 %s' % (src.IP())
        print('%s ' % dest.IP() + ping_cmd)
        dest.cmd(ping_cmd)
        wait_listening(src, dest, tcp_port)

    print "Listeners waiting"

    # Start the bandwidth and cwnd monitors in t1he background
    monitor = Process(target=monitor_devs_ng, args=('%s/bwm.txt' % args.dir, 1.0))
    monitor.start()

    start_tcpprobe()

    # Start the senders
    for src_index, dest_index in flowsToCreate:
        src = net.getNodeByName(get_host_name(src_index))
        dest = net.getNodeByName(get_host_name(dest_index))

        if random.uniform(0, 1) < 0.7:
            #  Send udp flow
            flow_time = random.randint(1, 5)
            src.cmd('%s -c %s -p %s -t %d -i 1 -ycu > /dev/null &' % (IPERF_PATH, dest.IP(), udp_port, flow_time))
        else:
            flow_time = random.randint(10, seconds)
            src.cmd('%s -c %s -p %s -t %d -i 1 -yc > /dev/null &' % (IPERF_PATH, dest.IP(), tcp_port, flow_time))

    print "Senders sending"

    for i in range(seconds):
        print "%d s elapsed" % i
        sleep(1)

    print "Ending experiment"
    os.system('killall -9 ' + IPERF_PATH)

    # Shut down monitors
    print "Waiting for monitor to stop"
    monitor.terminate()
    os.system('killall -9 bwm-ng')
    stop_tcpprobe()


def start_network(network, cmd='/usr/sbin/sshd', opts='-D'):
    network.start()

    # CLI( network )

    nHosts = len(network.hosts)
    print('|--- Number of hosts: %d' % nHosts)

    flowsToCreate = []
    for fcount in range(args.fph):
        if args.traffic.startswith('random'):
            matrix = compute_random(nHosts=nHosts)
        elif args.traffic.startswith('randbij'):
            matrix = compute_randbij(nHosts=nHosts)
        else:
            raise Exception('Unrecognized traffic type')
        print "Running with matrix", matrix
        addMatrixToFlow(flowsToCreate, matrix)

    run_expt(network, flowsToCreate)

    network.stop()


if __name__ == '__main__':
    setLogLevel('info')
    # setLogLevel('debug')
    hps = 1
    try:
        start_network(setupNetwork(controller_ip, hps, sw_ip_fname='topo_graphml/Att_IP_list'))
    finally:
        Popen('sudo mn -c', shell=True, preexec_fn=os.setsid)
